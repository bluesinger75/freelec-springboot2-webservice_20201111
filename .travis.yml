# 1) branches
#     - Travis CI를 어느 브랜치가 푸시될 때 수행할지 지정합니다.
#     - 현재 옵션은 오직 master 브랜치에 push 될 때만 수행합니다.
# 2) cache
#     - 그래이들을 통해 의존성을 받게 되면 이를 해당 디렉토리에 캐시하여, 같은 의존선은 다음 배포 때부터 다시 받지 않도록 설정합니다.
# 3) script
#     - master 브랜치에 푸시되었을 때 수행하는 명령어입니다.
#     - 여기서는 프로젝트 내부에 둔 gradlew 을 통해 clean & build 를 수행합니다.
# 4) notifications
#     - Travis CI 실행 완료 시 자동으로 알람이 가도록 설정합니다.
# 5) before_deploy
#     - deploy 명령어가 실행되기 전에 수행됩니다.
#     - CodeDeploy 는 Jar 파일은 인식하지 못하므로 Jar+ 기타 설정 파일들을 모아 압축합니다.(zip)
# 6) zip -r freelec-springboot2-webservice
#     - 현재 위치의 모든 파일을 freelec-springboot2-webservice 이름으로 압축 합니다.addons:
#     - 명령어의 마지막 위치는 본인의 프로젝트 이름이어야 합니다.
# 7) mkdir-p after_deploy
#     - deploy 라는 디렉토리를 Travis CI 가 실행 중인 위치에서 생성합니다.
# 8) mv freelec-springboot2-webservice.zip deploy/freelec-springboot2-webservice.zip
#     - freelec-springboot2-webservice.zip 파일을 deploy/freelec-springboot2-webservice.zip 으로 이동시킵니다.
# 9) deploy
#     - S3 로 파일 업로드 혹은 CodeDeploy 로 배포 등 외부 서비스와 연동 될 행위들을 선언합니다.
# 10) local_dir:deploy
#     - 앞에서 생성한 deploy 디렉토리를 지정합니다.
#     - 해당 위치의 파일들만 S3로 전송합니다.

language: java
jdk:
  - openjdk8

# 1)
branches:
  only:
    - master

before_install:
  - chmod +x gradlew
# 6)
before_deploy:
  - zip -r freelec-springboot2-webservice * # 7)
  - mkdir -p deploy
  - mv freelec-springboot2-webservice.zip deploy/freelec-springboot2-webservice.zip # 8)

# 2) 9)
deploy:
  - provider: s3
    assess_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: : $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: freelec-springboot-build # S3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip 파일 접근을  private 으로
    local_dir: deploy #10) before_deploy 에서 생성한 디렉토리
    wait-untill-deployed: true

# Travis CI 서버의 Home
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# 3)
script: "./gradlew clean build"

# CI 실행 완료 시 메일로 알람
# 4)
notifications:
  email:
    recipients:
      - bluesinger75@gmail.com